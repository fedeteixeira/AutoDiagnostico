/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package autodiagnostico;
import fuentes.Fuentes;
import java.awt.Font;
import Animacion.*; 
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import org.jpl7.Query;
import org.jpl7.Term;
/**
 *
 * @author Federico Teixeira G
 */
public class SolucionFrame extends javax.swing.JFrame {
    
    public Fuentes tipofuente;
    public int i=0; //Indice para recorrer el arreglo solution sin perder la posicion actual
    public java.util.Map<String,Term>[] solution; //Arreglo donde se almacenaran todas las causas y soluciones de una misma falla
    public volatile boolean salir=false;
    
    public SolucionFrame() {
        tipofuente= new Fuentes();
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
    }
    
    public SolucionFrame(String falla) { //Recibe una falla con la cual hará una consulta y obtendrá un listado de causas (Y) y soluciones (Z) que se guardarán en un arreglo solution
        tipofuente= new Fuentes();
        
        try {
            String conexion = "consult('proyecto.pl')"; //Abre el archivo prolog
            Query con = new Query(conexion); 
            con.hasMoreSolutions(); //Se necesita hacer una consulta con el nombre del archivo prolog para que se active dicho archivo
            
            String consul = "falla("+falla+",Y,Z)."; //Con una falla recibida buscará Y y Z falla('falla','causa','solucion').
            Query ejecutar = new Query(consul); //Hace una consulta con el string anterior
            solution = ejecutar.allSolutions();  
            /*En el arreglo solution guarda todas las soluciones 
            a la consulta falla(falla,Y,Z). de modo que en cada posicion se 
            almacenan tanto la variable Y como la Z, la X no se guarda porque 
            es la que se envió y solo se retornan las variables desconocidas*/
        } catch (Exception e) {
            e.printStackTrace();
        }
        initComponents();
        setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSolFrame = new javax.swing.JPanel();
        panelCausa = new javax.swing.JPanel();
        lCausa = new javax.swing.JLabel();
        panelSolucion = new javax.swing.JPanel();
        lSolucion = new javax.swing.JLabel();
        panelSalir = new javax.swing.JPanel();
        lSalir = new javax.swing.JLabel();
        panelProxSol = new javax.swing.JPanel();
        lProxSol = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taCausa = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        taSolucion = new javax.swing.JTextArea();
        labelFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Autodiagnóstico");
        setBackground(new java.awt.Color(153, 153, 153));
        setIconImage(new ImageIcon(getClass().getResource("/assets/wrench.png")).getImage());
        setMaximumSize(new java.awt.Dimension(800, 500));
        setMinimumSize(new java.awt.Dimension(800, 500));
        setPreferredSize(new java.awt.Dimension(800, 500));
        setResizable(false);

        panelSolFrame.setBackground(new java.awt.Color(153, 153, 153));
        panelSolFrame.setLayout(null);

        panelCausa.setBackground(new java.awt.Color(51, 51, 51));
        panelCausa.setLayout(null);

        lCausa.setFont(tipofuente.fuente(tipofuente.CENTURY,Font.BOLD,18));
        lCausa.setForeground(new java.awt.Color(255, 255, 255));
        lCausa.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lCausa.setText("CAUSA");
        lCausa.setPreferredSize(new java.awt.Dimension(52, 14));
        panelCausa.add(lCausa);
        lCausa.setBounds(-150, 0, 160, 30);
        if((lCausa.getX()+(lCausa.getWidth())) < 600){
            Animacion.mover_derecha(lCausa.getX(), 50, 2, 1, lCausa);
        }

        panelSolFrame.add(panelCausa);
        panelCausa.setBounds(0, 20, 800, 30);

        panelSolucion.setBackground(new java.awt.Color(51, 51, 51));
        panelSolucion.setLayout(null);

        lSolucion.setFont(tipofuente.fuente(tipofuente.CENTURY,Font.BOLD,18));
        lSolucion.setForeground(new java.awt.Color(255, 255, 255));
        lSolucion.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lSolucion.setText("SOLUCIÓN");
        lSolucion.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        panelSolucion.add(lSolucion);
        lSolucion.setBounds(-150, 0, 160, 30);
        if((lSolucion.getX()+(lCausa.getWidth())) < 600){
            Animacion.mover_derecha(lSolucion.getX(), 50, 2, 1, lSolucion);
            /*Los parámetros a utilizar son:
            Animacion.mover_izquierda(
                coordenada X inicial,
                coordenada X final o destino,
                retardo en milisegundos para cada iteración,
                cantidad de pixeles a recorrer en cada iteración hasta llegar a la coordenada final,
                componente (frame, panel, jdialog)
            );
            A MAYOR CANTIDAD DE MILISEGUNDOS, MAS LENTO SE MOVERÁ EL FRAME.
            A MAYOR CANTIDAD DE PIXELES A RECORRER EN CADA ITERACIÓN, MÁS "BRUSCO" SALTARÁ EL FRAME DE UNA POSICIÓN A OTRA.
            */
        }

        panelSolFrame.add(panelSolucion);
        panelSolucion.setBounds(0, 210, 800, 30);

        panelSalir.setBackground(new java.awt.Color(153, 0, 0));
        panelSalir.setLayout(null);

        lSalir.setBackground(new java.awt.Color(255, 255, 255));
        lSalir.setFont(tipofuente.fuente(tipofuente.CENTURY,0,14));
        lSalir.setForeground(new java.awt.Color(255, 255, 255));
        lSalir.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lSalir.setText("SALIR");
        lSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lSalirMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lSalirMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lSalirMousePressed(evt);
            }
        });
        panelSalir.add(lSalir);
        lSalir.setBounds(0, 0, 170, 50);

        panelSolFrame.add(panelSalir);
        panelSalir.setBounds(210, 400, 170, 50);

        panelProxSol.setBackground(new java.awt.Color(153, 0, 0));
        panelProxSol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                panelProxSolMouseEntered(evt);
            }
        });
        panelProxSol.setLayout(null);

        lProxSol.setBackground(new java.awt.Color(255, 255, 255));
        lProxSol.setFont(tipofuente.fuente(tipofuente.CENTURY,0,14));
        lProxSol.setForeground(new java.awt.Color(204, 204, 204));
        lProxSol.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lProxSol.setText("PRÓXIMA SOLUCIÓN");
        lProxSol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lProxSolMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lProxSolMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lProxSolMousePressed(evt);
            }
        });
        if(solution.length>1) //Si hay mas de una solucion
        lProxSol.setForeground(new  java.awt.Color(255,255,255));
        panelProxSol.add(lProxSol);
        lProxSol.setBounds(0, 0, 170, 50);

        panelSolFrame.add(panelProxSol);
        panelProxSol.setBounds(430, 400, 170, 50);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        taCausa.setEditable(false);
        taCausa.setColumns(20);
        taCausa.setFont(tipofuente.fuente(tipofuente.CENTURY,0,16));
        taCausa.setLineWrap(true);
        taCausa.setRows(3);
        taCausa.setWrapStyleWord(true);
        taCausa.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        taCausa.setText(solution[i].get("Y").toString()); //Agrega una causa que se obtiene del arreglo solution mediante solution[i].get("Y").toString()
        taSolucion.setText(solution[i].get("Z").toString()); //Agrega una solucion que se obtiene del arreglo solution mediante solution[i].get("Z").toString()
        jScrollPane1.setViewportView(taCausa);

        panelSolFrame.add(jScrollPane1);
        jScrollPane1.setBounds(40, 60, 710, 120);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        taSolucion.setEditable(false);
        taSolucion.setColumns(20);
        taSolucion.setFont(tipofuente.fuente(tipofuente.CENTURY,0,16));
        taSolucion.setLineWrap(true);
        taSolucion.setRows(3);
        taSolucion.setWrapStyleWord(true);
        taSolucion.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(taSolucion);

        panelSolFrame.add(jScrollPane2);
        jScrollPane2.setBounds(40, 250, 710, 120);

        labelFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/thin-client-background-high.gif"))); // NOI18N
        panelSolFrame.add(labelFondo);
        labelFondo.setBounds(-550, -200, 1920, 1070);

        new Thread(new Runnable() {
            @Override
            public void run() {
                while(!salir){
                    while(labelFondo.getX()<0&&!salir){
                        labelFondo.setLocation((labelFondo.getX()+1), labelFondo.getY());
                        try{
                            Thread.sleep(20);
                        }catch (InterruptedException e){}

                    }

                    try{
                        Thread.sleep(2000);
                    }catch (InterruptedException e){}

                    while(labelFondo.getX()>-1000&&!salir){
                        labelFondo.setLocation((labelFondo.getX()-1), labelFondo.getY());
                        try{
                            Thread.sleep(20);
                        }catch (InterruptedException e){}
                    }

                    try{
                        Thread.sleep(2000);
                    }catch (InterruptedException e){}

                }
            }
        }).start();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelSolFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelSolFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lSalirMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lSalirMouseEntered
        panelSalir.setBackground(new  java.awt.Color(204,0,51));
    }//GEN-LAST:event_lSalirMouseEntered

    private void lSalirMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lSalirMouseExited
        panelSalir.setBackground(new  java.awt.Color(153,0,0));
    }//GEN-LAST:event_lSalirMouseExited

    private void lSalirMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lSalirMousePressed
        salir=true;
        new DiagnosticoFrame().setVisible(true);
        dispose(); //Elimina el frame actual
    }//GEN-LAST:event_lSalirMousePressed

    private void lProxSolMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lProxSolMouseEntered
        if(solution.length>1) //Si hay mas de una causa/solucion
            panelProxSol.setBackground(new  java.awt.Color(204,0,51));
    }//GEN-LAST:event_lProxSolMouseEntered

    private void lProxSolMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lProxSolMouseExited
        panelProxSol.setBackground(new  java.awt.Color(153,0,0));
    }//GEN-LAST:event_lProxSolMouseExited

    private void lProxSolMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lProxSolMousePressed

        if(i+1==solution.length){ //Si es la ultima posicion del arreglo solution (es la ultima causa/solucion)
            i=0; //Se reinicia el indice para recorrer el arreglo solution
        }else{ 
            i++; //Se aumenta cuando se presiona el boton para que asi se puedan recorrer todas las soluciones si una no es satisfactoria para la persona
        }
        taCausa.setText(solution[i].get("Y").toString()); //Coloca en el taCausa (el textArea de arriba) una causa obtenida mediante solution[i].get("Y").toString()
        taSolucion.setText(solution[i].get("Z").toString());//Coloca en el taSolucion (el textArea de abajo) una causa obtenida mediante solution[i].get("Z").toString()
    }//GEN-LAST:event_lProxSolMousePressed

    private void panelProxSolMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelProxSolMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_panelProxSolMouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SolucionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SolucionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SolucionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SolucionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SolucionFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lCausa;
    private javax.swing.JLabel lProxSol;
    private javax.swing.JLabel lSalir;
    private javax.swing.JLabel lSolucion;
    private javax.swing.JLabel labelFondo;
    private javax.swing.JPanel panelCausa;
    private javax.swing.JPanel panelProxSol;
    private javax.swing.JPanel panelSalir;
    private javax.swing.JPanel panelSolFrame;
    private javax.swing.JPanel panelSolucion;
    private javax.swing.JTextArea taCausa;
    private javax.swing.JTextArea taSolucion;
    // End of variables declaration//GEN-END:variables
}
